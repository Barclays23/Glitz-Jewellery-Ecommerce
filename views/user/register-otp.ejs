<%- include('../layouts/userLayouts/user-header.ejs') %>

<%- include('../layouts/userLayouts/user-preloader.ejs') %>

<%- include('../layouts/userLayouts/user-navbar.ejs') %>

<main class="page-content">
    <div class="tm-section bg-white tm-padding-section">
        <div class="container">
            <form class="tm-regular-form otpform">
                <div>
                    <h4 class="form-title">VERIFY YOUR ACCOUNT</h4>
                </div>
                <div>
                    <p class="form-title-info">We've just sent you an email containing a verification code. Please check your inbox and enter the code here to complete the registration process.</p>
                </div>
                <div class="tm-otpform-inner">
                    <div class="tm-form-field otp-area">
                        <span id="error-message" style="color: red;"></span>
                        <br>
                        <input type="text" name="digit1" id="digit1" class="otp-field" maxlength="1" oninput="moveToNext(this)" onkeypress="return isNumberKey(event)" pattern="[0-9]*" inputmode="numeric"/>
                        <input type="text" name="digit2" id="digit2" class="otp-field" maxlength="1" oninput="moveToNext(this)" onkeypress="return isNumberKey(event)" pattern="[0-9]*" inputmode="numeric"/>
                        <input type="text" name="digit3" id="digit3" class="otp-field" maxlength="1" oninput="moveToNext(this)" onkeypress="return isNumberKey(event)" pattern="[0-9]*" inputmode="numeric"/>
                        <input type="text" name="digit4" id="digit4" class="otp-field" maxlength="1" oninput="moveToNext(this)" onkeypress="return isNumberKey(event)" pattern="[0-9]*" inputmode="numeric"/>
                        <input type="text" name="digit5" id="digit5" class="otp-field" maxlength="1" oninput="moveToNext(this)" onkeypress="return isNumberKey(event)" pattern="[0-9]*" inputmode="numeric"/>
                        <input type="text" name="digit6" id="digit6" class="otp-field" maxlength="1" oninput="moveToNext(this)" onkeypress="return isNumberKey(event)" pattern="[0-9]*" inputmode="numeric"/>
                    </div>
                </div>
                <div>
                    <!-- <h5> <%= exp %></h5>
                    <div id="otp-timer" style="color: red;"> </div> -->
                    <!-- <p>OTP Expires in : <span id="otp-timer" style="color: red;"></span></p> -->
                    <span id="otp-timer" style="color: red;"></span>
                    <p class="form-bottom-msg">Didn't receive the verification code yet? 
                        <button type="button" onclick="resendCode()"><b>Resend Code</b></a>
                    </p>
                </div>
                <div class="tm-checkout-submit">
                    <div class="tm-form-inner">
                        <div class="tm-form-field">
                            <button type="button" onclick="formSubmit()" id="verifyButton" class="tm-button ml-auto">Verify Account</button>
                        </div>
                    </div>
                </div>
                <!-- Hidden input field for the id parameter -->
            </form>
        </div>
    </div>
</main>



<!-- ------------------------------------------------------------------------------- -->


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<!-- script for otp timer -->
<script>

const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
let userID = urlParams.get('id');
const expireQuery = urlParams.get('expire'); // String
const expirationTime = new Date(expireQuery); // Converted to time

console.log('expire time from query : ', expirationTime);
console.log('id from query : ', userID);


const otpTimer = document.getElementById("otp-timer");


const updateCountdown = () => {
    const now = new Date(); //in date & time format
    const nowGetTime = new Date().getTime(); //in milliseconds

    console.log('now time :', now);
    console.log('nowGetTime :', nowGetTime);

    const distance = expirationTime - now;
    console.log("Distance :", distance);

    const distance2 = expirationTime - nowGetTime;
    console.log("Distance2 :", distance2);

    if (distance < 0) {
        otpTimer.innerHTML = "OTP Expired !";
        return;
    }

    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    // otpTimer.innerHTML = distance2;

    otpTimer.innerHTML = `${minutes}m ${seconds}s`;

};

updateCountdown();
setInterval(updateCountdown, 1000);







// for submitting otp form (verify-account)
function formSubmit() {
    const num1 = document.getElementById('digit1').value;
    const num2 = document.getElementById('digit2').value;
    const num3 = document.getElementById('digit3').value;
    const num4 = document.getElementById('digit4').value;
    const num5 = document.getElementById('digit5').value;
    const num6 = document.getElementById('digit6').value;

    const OTP = num1 + num2 + num3 + num4 + num5 + num6;

    const errorMessage = document.getElementById('error-message');

    // const userID = document.getElementById('userId').value;
    console.log('user entered OTP: ', OTP);
    console.log('OTP users id is: ', userID);


    if(OTP.length < 6){
        errorMessage.textContent = "Enter Valid OTP";
        errorMessage.style.display = 'block';
        return;
    }



    // Create fetch request for url verify-account
    const url = '/verify-account';

    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ OTP, userID })
    })
    .then(response => response.json())
    .then(data => {
        console.log('response data from otp page', data);

        if (data.success) {
            Swal.fire({
                title: 'Verified !',
                text: 'Your account verification is success.',
                icon: 'success',
                showConfirmButton: false,
                // timer: 2000 // Close alert after 2 seconds

            }).then(() => {
                window.location.href = '/'; // Redirect to homepage or login page
        });
        } else if (data.incorrect){
            errorMessage.textContent = data.message;
            errorMessage.style.display = 'block';
        } else if (data.otpExpire){
            errorMessage.textContent = data.message;
            errorMessage.style.display = 'block';
        }
         else {
            console.error('failed to resend verification otp');
        }
    })
    .catch(error => {
        console.error('Error in resend otp:', error);
    });

};




// for resending otp
function resendCode(){
    const url = `/resend-otp?id=${userID}`;

    fetch(url, {
        method: 'GET',
        headers: {
            // 'Content-Type': 'text/html'
            'Content-Type': 'application/json'
        },
        // body: JSON.stringify({ userID }) // ?? sending anything from body? how id is sending to backend?
    })
    .then(response => response.json()) //what is mean by this line?
    .then(data => {
        console.log('response data from resend-otp page', data);
        if (data.success) {
            Swal.fire({
                title: 'Sent',
                text: 'The verification code has been successfully resent to your email.',
                icon: 'success',
                showConfirmButton: false,
                // timer: 2000 // Close alert after 2 seconds

            }).then(() => {
            window.location.href = `/verify-account?id=${data.userId}&expire=${data.expirationTime}`; // Redirect to otp verification page
        });
        } else {
            console.log('resend otp data failed');
        }

    })

    .catch(error => {
        console.error('Error in resending otp', error);
    });


    // window.location.href=`/resend-otp?id=${userID}`;
}





// to move the curser to next field automatically
function moveToNext(input) {
    if (input.value.length >= input.maxLength) {
        var nextInput = input.nextElementSibling;
        if (nextInput !== null) {
            nextInput.focus();
        }
    }
}


function isNumberKey(evt) {
    var charCode = (evt.which) ? evt.which : event.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    }
    return true;
}


</script>





<!-- ----------------------------------------------------------------------- -->


<%- include('../layouts/userLayouts/user-footer.ejs') %>
